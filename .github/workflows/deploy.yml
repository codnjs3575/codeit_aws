# .github/workflows/deploy.yml

name: EC2로 자동배포하기

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 가져오기
        uses: actions/checkout@v4

      - name: Node 설치
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 의존성(라이브러리) 설치
        run: npm ci

      - name: .env 파일 생성
        run: echo "${{ secrets.ENV }}" > .env

      - name: 테스트
        run: echo "테스트" # 실제로는 npm run test 하면 됨

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t nextjs-aws-test .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag nextjs-aws-test ${{ steps.login-ecr.outputs.registry }}/codeit-nextjs-ecr-repo:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/codeit-nextjs-ecr-repo:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            set -e
            docker stop nextjs-aws-test || true
            docker rm nextjs-aws-test || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/codeit-nextjs-ecr-repo:latest
            docker run -d --name nextjs-aws-test -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/codeit-nextjs-ecr-repo:latest
